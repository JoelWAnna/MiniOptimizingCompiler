diff --git a/MiniOptIm/mil/Block.java b/MiniOptIm/mil/Block.java
index 0e9b89a..4898b65 100644
--- a/MiniOptIm/mil/Block.java
+++ b/MiniOptIm/mil/Block.java
@@ -475,10 +475,11 @@ public class Block extends Defn {
 					    b.formals = nfs;
 					    b.parent = this;
 					    b.replacedVar = knownArgs[j][k];				    
-					    
+					    b.code.replaceCalls(id, j, formals[j], b);
 					    children = new Blocks(b, children);
+					    
 						//defns.
-						System.out.println("Created Block " + b.id);
+						System.out.println("Created Block " + b.id + "from block " + id);
 					}
 				    b.display();
 				    //new BlockCall(b);
diff --git a/MiniOptIm/mil/Match.java b/MiniOptIm/mil/Match.java
index 2c44bf1..92fd2b7 100644
--- a/MiniOptIm/mil/Match.java
+++ b/MiniOptIm/mil/Match.java
@@ -384,7 +384,7 @@ public class Match extends Code {
 				    	else
 				    		temp.args[i1] = alt_blockCall.args[i1];
 				    }
-				    def = temp;
+				    alts[i].replaceBc(temp);
 				    success = true;
 				}
 			}
diff --git a/MiniOptIm/mil/TAlt.java b/MiniOptIm/mil/TAlt.java
index 8d2e251..b5e7774 100644
--- a/MiniOptIm/mil/TAlt.java
+++ b/MiniOptIm/mil/TAlt.java
@@ -1,4 +1,4 @@
-package mil;
+package mil;;
 
 
 /** Represents an alternative in a monadic Match.
@@ -16,6 +16,9 @@ public class TAlt {
         this.bc = bc;
     }
 
+    public void replaceBc(BlockCall bc) {
+    	this.bc = bc;
+    }
     /** Test for a free occurrence of a particular variable.
      */
     public boolean contains(Var w) {

new file mode 100644
index 0000000..23963a8
--- /dev/null
+++ b/week3.pdf
@@ -0,0 +1,49 @@
+Joel Anna                                                         Week 3 Report:
+
+
+
+CS401 Optimization Week 2 report .
+I spent this week reading chapter 9 of the “Dragon” Compilers book., as well
+as the Monadic Intermediary Language Documentation. I found the coverage
+of the data ﬂow analysis from this much easier to follow than in Mogensen’s
+book. I was able to take the notion of the (semi)-lattice from the book, and
+reﬁne my existing code to better reﬂect the lattice structure, I noted that in
+the book the top node represents that there is no data (undeﬁned) and that
+the bottom represents that the argument is not a constant, which is the inverse
+of my understanding of how we had discussed the structure when you had ﬁrst
+introduced me to it. In the Monadic Intermediary Language documentation, I
+noted that it states that when a variable is set by a Bind “there is no way to
+change or otherwise assign a new value for an identier v that has been introduced
+in this way.” which initially did not make sense, but once I realized that the
+assignments such as i → i+1, only occur when i is introduced as a block formal.
+
+   I was able to write a working version of the constant propagation algorithm,
+building oﬀ of the code that I wrote last week. The new code takes the array of
+information about a blocks formals which is a [formals.length][maximum tuple
+size] array that either is an array of constant values that are args to the block,
+an Atom.UNDEF if there are no known constants used as arguments, or an
+Atom.NAC if there are more than the maximum tuple size possible constants,
+or if the block modiﬁes that argument. With each constant that is known, a
+new block is created that has an Arg → Constant inserted at the beginning,
+and the rest of the code of the original block. Each caller to the current block
+that has the same constant argument is replaced with a call to the new block.
+This implementation had the eﬀect of completely unrolling both loops in arrs.mini,
+but it turned out to be too aggressive either on its own, or in combination with
+the local optimizations because for the case of sample.mini, there is no stopping
+point and the amount of code grows until the a stack overﬂow occurs.
+I made additional attempts to control the amount of growth, by keeping count
+of how many times each block has been specialized and stopping the generation
+of new blocks, but this attempt has thus far failed, the exact cause is not clear,
+but I believe it is because of the preﬁx inlining combined with the way that I
+was counting the specializations.
+
+
+  For the next week I am caught between considering my current work a ﬁnished
+experiment that failed, and starting fresh with the experience this has given,
+as well as the additional knowledge from the readings, alternatively it may
+be worthwhile to continue working to correct the incorrect behavior of this
+implementation. I would like to hear your thoughts on either approach, and
+whether it would be better to have a more abstract framework that applies
+the IN and OUT deﬁnition calculations and can be used for both constant
+propagation and common subexpression elimination.
+
\ No newline at end of file
