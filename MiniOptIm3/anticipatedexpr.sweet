package mil;

    public void optimize()
    case MILProgram >  {
		debug.Log.off();
		//debug.Log.on();
		anticipatedExpr();
		
    }
	void anticipatedExpr()
	case MILProgram {
		/*
			for (DefnSCCs dsccs = sccs; dsccs!=null; dsccs=dsccs.next) {
			  for (Defns ds=dsccs.head.getBindings(); ds!=null; ds=ds.next) {
				ds.head.clearAnticipatedInsOuts();
			  }
			}
		*/
		int mycount = 0;
		for (int i = 1; i != 0;) {
		mycount++;
		i=0;

			for (DefnSCCs dsccs = sccs; dsccs!=null; dsccs=dsccs.next) {
			  for (Defns ds=dsccs.head.getBindings(); ds!=null; ds=ds.next) {
				i += ds.head.Calculate_Anticipated_Expr();
					ds.head.computeAnticipatedInMeets();
			  }
			}
			for (DefnSCCs dsccs = sccs; dsccs!=null; dsccs=dsccs.next) {
			  for (Defns ds=dsccs.head.getBindings(); ds!=null; ds=ds.next) {
				ds.head.setNextAnticipatedIns();
			  }
			}
/*
	//debug code
			debug.Log.println("******************************************************Loop " +  mycount + " " + i + " changes");
								System.out.println("---Anticipated Expressions-----------------------------------");
				for (DefnSCCs dsccs = sccs; dsccs!=null; dsccs=dsccs.next) {
					for (Defns ds=dsccs.head.getBindings(); ds!=null; ds=ds.next) {
						ds.head.printAnticipatedInsOuts();
					}
				}
				debug.Log.println("******************************************************done:");
*/			
		}

		System.out.println("---Anticipated Expressions-----------------------------------");
		for (DefnSCCs dsccs = sccs; dsccs!=null; dsccs=dsccs.next) {
			for (Defns ds=dsccs.head.getBindings(); ds!=null; ds=ds.next) {
				ds.head.printAnticipatedInsOuts();
			}
		}
	//	System.out.println("--------------------------------------");
		
	}
		
	public void setNextAnticipatedIns()	
	case Defn {}
	case Block {
		anticipated_In_set = anticipated_Next_Ins;
		}

	public void computeAnticipatedInMeets()
	case Defn {}
	case Block {
			debug.Log.println("computeAnticipatedInMeets At block " + id);
			boolean firstRound = true;
			boolean union = true;
			boolean mode = !union; // The interpretation of !union is intersection
			anticipated_Out_set = G_Facts.meets(incomingOut_Sets, mode);
			incomingOut_Sets = null;
		}

	public int Calculate_Anticipated_Expr()
	case Block {
		debug.Log.println("Calculate_Anticipated_Expr At block " + id);
		boolean union = true;
		//printInsOuts();
		anticipated_Next_Ins = code.inset(null, id, this);
		//printInsOuts();
		G_Facts merged = G_Facts.meets(anticipated_Next_Ins, anticipated_In_set, !union);
		int oldlen = G_Facts.length(anticipated_In_set);
		if ((oldlen != G_Facts.length(anticipated_Next_Ins) )
			|| (oldlen != G_Facts.length(merged))
			){
			debug.Log.println("oldlen: " + oldlen + " newLength:" + G_Facts.length(anticipated_Next_Ins) + 
			" mergedlen:" + G_Facts.length(merged));
			return 1;
		}	

		return 0;
		}
	case Defn { return 0;}

	public void clearAnticipatedInsOuts()
	case Defn {}
	case Block { incomingOut_Sets = null; anticipated_Out_set = anticipated_In_set = null; }
	
	public G_Facts addOuts(G_Facts outs) 
	case Tail { return null; }
	case TAlt {	 return bc.addOuts(outs); }
	case BlockCall {
	
		//G_Facts renamed = outs.copy();
		G_Facts renamed = outs;
		if (outs != null) {
			renamed = outs.copyWithSubst(args, b.getFormals());
		}
		b.incomingOut_Sets = new Sets(new Set(renamed), b.incomingOut_Sets);
		if (b.anticipated_In_set != null)
			return b.anticipated_In_set.copyWithSubst(b.getFormals(), args);
		return outs;
	}
	

	public void printAnticipatedInsOuts()
	case Defn {}
	case Block {
			if (anticipated_Out_set != null) {
			anticipated_Out_set.print(false, id);
			}
			if (anticipated_In_set != null) {
				anticipated_In_set.print(true, id);
			}
		}

	
	public G_Facts inset(G_Facts outs, String id, Block container)
	case Code abstract;
	case Bind {
		G_Facts ins = null;
		
        if (c == null) {
        	debug.Log.println("unlinked bind call found!?!");
        }
		else {
			ins = c.inset(outs, id, container);
		}
		debug.Log.println("    BIND ENTRY: block: " + id);
		boolean DEBUGGING = debug.Log.enabled();
		if (DEBUGGING) {
			t.displayln();
			if (outs != null) outs.print();
		}
		
		G_Fact d = null;
		if (t.isPure()) {
			debug.Log.println("t is pure:");
			d = new G_Fact(t, new Atoms(v, null));
		}

		if (ins == null) {
			if (d != null) {	
				ins = new G_Facts(d, null);
				if (DEBUGGING) {
					ins.print();
				}
			}
		}
		else {
			debug.Log.println("    BIND: Ins not null");
			if (DEBUGGING) {
				ins.print();
			}
			G_Facts tailins = t.addOuts(ins);
			debug.Log.println("    BIND: ins before");
			if (DEBUGGING) {
				if (ins != null) ins.print();
			}
			ins = G_Facts.meets(tailins, ins, true);
			debug.Log.println("    BIND: ins after");
			if (DEBUGGING) {
				if (ins != null) ins.print();
			}
			debug.Log.println("    BIND: ins before kill");
			if (DEBUGGING) {
				if (ins != null) ins.print();
			}
			if (ins != null) ins = ins.kill(v);
			debug.Log.println("    BIND: ins after kill");
			if (DEBUGGING) {
				if (ins != null) ins.print();
			}
			if (d != null) {
			if (ins != null) ins = ins.gen(d);
				else ins = new G_Facts(d, null);
				debug.Log.println("    BIND: ins after gen");
				if (DEBUGGING) {
					ins.print();
				}
			}
		}
		debug.Log.println("    BIND EXIT: block: " + id);
		return ins;
		}
	case Done { 
			boolean DEBUGGING = debug.Log.enabled();	
		debug.Log.println("    DONE ENTRY: block: " + id);
			if (DEBUGGING) {
				t.display();
				if (outs != null) outs.print();
			}
			G_Facts ins = t.addOuts(outs);
			if (DEBUGGING) {
				if (ins != null) ins.print();
			}
			//if (t.isPure()) {
			
				debug.Log.println("    DONE EXIT: block: " + id);
				ins = G_Facts.meets(outs, ins, true);
				container.incomingOut_Sets = new Sets(new Set(ins), null);
				return ins;
			///}
			//return ins;
		}
	case Match {
			// TODO? check purity
			
			boolean DEBUGGING = debug.Log.enabled();
		
			Sets ins = null;
			if (def != null) {
				G_Facts defIns = def.addOuts(outs);
				if (defIns != null) {
					ins = new Sets(new Set(defIns), ins);
				}
			}
		    for (int i=0; i<alts.length; i++) {
				G_Facts altsIns = alts[i].addOuts(outs);
				if (altsIns != null) {
					ins = new Sets(new Set(altsIns), ins);
				}
				
			}
			boolean union = true;
			if (debug.Log.enabled() && ins != null) {
				ins.print();
				
			}
			
			container.incomingOut_Sets = ins;
			
			debug.Log.println("Block :" + id + "before meets"); 
			G_Facts met = G_Facts.meets(ins, !union);
			if (DEBUGGING && met != null) {
				debug.Log.println("Block :" + id); 
				
				met.print();
				
			}
			outs = G_Facts.meets(met, outs, union);
			if (DEBUGGING && outs != null) {
				debug.Log.println("Block :" + id); 
				outs.print();
				//System.exit(0);
				
			}
			return outs;
			}


	public class Block {
		public Sets incomingOut_Sets;
		public G_Facts anticipated_Out_set;
		public G_Facts anticipated_In_set;
		public G_Facts anticipated_Next_Ins;
	}

