
package mil;
    public void optimize()
    case MILProgram >  {
		dataflow();
    }
	void dataflow()
	case MILProgram {
		/*
			for (DefnSCCs dsccs = sccs; dsccs!=null; dsccs=dsccs.next) {
			  for (Defns ds=dsccs.head.getBindings(); ds!=null; ds=ds.next) {
				ds.head.clearInsOuts();
			  }
			}
		*/

		for (int i = 1; i != 0;) {
			for (DefnSCCs dsccs = sccs; dsccs!=null; dsccs=dsccs.next) {
				for (Defns ds=dsccs.head.getBindings(); ds!=null; ds=ds.next) {
					ds.head.computeInMeets();
				}
			}
			for (DefnSCCs dsccs = sccs; dsccs!=null; dsccs=dsccs.next) {
			  for (Defns ds=dsccs.head.getBindings(); ds!=null; ds=ds.next) {
				i = ds.head.dataflow();
			  }
			}
			for (DefnSCCs dsccs = sccs; dsccs!=null; dsccs=dsccs.next) {
			  for (Defns ds=dsccs.head.getBindings(); ds!=null; ds=ds.next) {
				ds.head.setNextOuts();
			  }
			}
		}

		for (DefnSCCs dsccs = sccs; dsccs!=null; dsccs=dsccs.next) {
			for (Defns ds=dsccs.head.getBindings(); ds!=null; ds=ds.next) {
				ds.head.printInsOuts();
			}
		}
	}
		
	public void setNextOuts()	
	case Defn {}
	case Block {
		outs = nextOuts;
		}
	public void computeInMeets()
	case Defn {}
	case Block {
		System.out.println("computeInMeets At block " + id);
		boolean firstRound = true;
		boolean union = true;
		boolean mode = !union; // The interpretation of !union is intersection
		Pairss insIter;
		for (insIter = nextIns; insIter != null; insIter = insIter.next) {
			Pairs caller =  insIter.head;
			
			if (firstRound) {
				firstRound = false;
				nextIns = nextIns.next;
				if (nextIns == null) {
					// only 1 caller to this block
					if (caller != null) {
						ins = caller.copy();
					}
					break;
				}
				else{	
					Pairs nextCaller =  nextIns.head;
					ins = Pairs.meets(caller, nextCaller, mode);
				}
			}
			else {
				ins = Pairs.meets(ins, caller, mode);
			}
		}
		nextIns = null;
		}

	public int dataflow()
	case Block {
		System.out.println("dataflow At block " + id);
		boolean union = true;

		nextOuts = code.outset(ins);
		int oldlen = Pairs.length(outs);
		if ((oldlen != Pairs.length(nextOuts) )
			|| (oldlen != Pairs.length(Pairs.meets(nextOuts, outs, !union)))
			){
			return 1;
		}	

		return 0;
		}
	case Defn { return 0;}

	public void clearInsOuts()
	case Defn {}
	case Block { nextIns = null; ins = outs = null; }
	
	public Pairs addIns(Pairs ins) 
	case Tail { return null; }
	case TAlt {	 return bc.addIns(ins); }
	case BlockCall {
		b.nextIns = new Pairss(ins, b.nextIns);
		return b.outs;
	}
	

	public void printInsOuts()
	case Defn {}
	case Block {
			if (ins != null) {
			ins.print(true, id);
			}
			if (outs != null) {
				outs.print(false, id);
			}
		}
	public Pairs outset(Pairs ins)
	case Code abstract;
	case Bind {
		Pairs outs = null;
		Pair d = new Pair(t, new Atoms(v, null));
		if (ins == null) {
			outs = new Pairs(d, null);
		}
		else {
			outs = t.addIns(ins);
			outs = Pairs.meets(outs, ins, true);
			outs.kill(v);
			outs.gen(d);
		}
        if (c == null) {
        	System.out.println("unlinked bind call found!?!");
        	return outs;
        }
		return c.outset(outs);
		}
	case Done { 
			Pairs outs = t.addIns(ins);			
			//if (ins != null) ins.print(false, "blaJ");
			//if (outs != null)  outs.print(false, "blaJ");
			return Pairs.meets(outs, ins, true); }
	case Match {
			Pairss outs = null;
			if (def != null) {
				Pairs defOuts = def.addIns(ins);
				if (defOuts != null) {
					outs = new Pairss(defOuts, outs);
				}
			}
		    for (int i=0; i<alts.length; i++) {
				Pairs altsOuts = alts[i].addIns(ins);
				if (altsOuts != null) {
					outs = new Pairss(altsOuts, outs);
				}
				
			}
			return ins;
			}

	public class Pair(public Tail t, public Atoms atoms) {
	}
	public class Block {
		public Pairss nextIns;
		public Pairs ins;
		public Pairs outs;
		public Pairs nextOuts;
	}
	

	public boolean equal(Pair other)
	case Pair {
			if (this.t.sameTail(other.t))
			{
				return true;
			}
			return false;
		}
	public boolean merge(Pair other) 
	case Pair {
			if (this.equal(other)) {
				Atoms current = other.atoms;
				while (current != null)
				{
					boolean found = false;
					Atoms old = atoms;
					while (old != null) {
						if (old.head.sameAtom(current.head)) {
							found = true;
							break;
						}
						old = old.next;
					}
				if (!found)
					atoms = new Atoms(current.head, atoms);
				current = current.next;
				}
				return true;
			}
			return false;
		}
	public Pair copy()
	case Pair {
		return new Pair(t, atoms.copy());
		}
	

	macro List(Atom)
	macro List(Pair)
	macro List(Pairs)
	macro AddLength(Pairs) 
	public void print(boolean inset, String id)
	case Pairs {
		if (inset) {
			System.out.println("Inset for block " + id);
		}
		else {
			System.out.println("Outset for block " + id);
		}
		print();
	}
	public void print()
	case Pairs {
		head.t.display();
		System.out.print("->");
		Atoms current = head.atoms;
		System.out.print(current.head.toString());
		current = current.next;
		while (current != null) {
			System.out.print("," + current.head.toString());
			current = current.next;
			}
		System.out.println("");
		if (next != null)
			next.print();
	}
		
		
		
		
	
			
	
	public Pairs copy()
	case Pairs	{
		if (next != null)
			return new Pairs(head.copy(), next.copy());	
		return new Pairs(head.copy(), next);		
	}
	public Atoms copy()
	case Atoms	{
		if (next != null)
			return new Atoms(head, next.copy());
		return new Atoms(head, next);
	}

	public Var isVar() 
	case Atom { return null; }
	case Var { return this; }

	public Pairs kill(Atom a)
	case Pairs {
		Var v = a.isVar();
		if (v == null)
			return this;
		if (head.t.contains(v)) {
			if (next != null)
				return next.kill(v);
			return null;
		}
		if (next != null)
			return new Pairs(head, next.kill(v));
		return new Pairs(head, null);
	}
	public Pairs gen(Pair p)
	case Pairs {
		if (head.merge(p)) {
			return this;
		}
		if (next != null) {
			return new Pairs(head, next.gen(p));
		}
		return new Pairs(p, null);
	}

	public static Pairs meets(Pairs toMeetA, Pairs toMeetB, boolean union)
	case Pairs {
		if (toMeetA == null) {
			if (toMeetB == null || !union) {
				return null;
			}
			return toMeetB.copy();
		}
		if (toMeetB == null) {
			if (toMeetA == null || !union) {
				return null;
			}
			return toMeetA.copy();
		}
		// toMeetA != null && toMeetB != null
		Pairs met = null;

		Pairs toMeetAHead = toMeetA = toMeetA.copy();
		Pairs toMeetBHead = toMeetB = toMeetB.copy();
		
		
		Pairs previousA = null;
		Pairs previousB = null;

		while (toMeetA != null)
		{
			toMeetB = toMeetBHead;
			previousB = null;
			boolean found = false;
			while (toMeetB != null)
			{
				if (toMeetA.head.equal(toMeetB.head)) {
						Pair toInsert = toMeetA.head.copy();
						toInsert.merge(toMeetB.head);
						met = new Pairs(toInsert, met);
						found = true;
						if (previousA == null) {
							toMeetAHead = toMeetA.next;
						}
						else {
							previousA.next = toMeetA.next;
						}
						if (previousB == null) {
							toMeetBHead = toMeetB.next;
						}
						else {
							previousB.next = toMeetB.next;
						}
						break;
				}
				else {
					previousB = toMeetB;
				}
				toMeetB = toMeetB.next;
			}
			if (!found) {
				if (union) {
					met = new Pairs(toMeetA.head.copy(), met);
				}
				previousA = toMeetA;
			}
			toMeetA = toMeetA.next;
		}

		if (union) {
			while (toMeetAHead != null) {
				met = new Pairs(toMeetAHead.head.copy(), met);
				toMeetAHead = toMeetAHead.next;
			}
			while (toMeetBHead != null) {
				met = new Pairs(toMeetBHead.head.copy(), met);
				toMeetBHead = toMeetBHead.next;
			}
		}
		return met;
	}
 
