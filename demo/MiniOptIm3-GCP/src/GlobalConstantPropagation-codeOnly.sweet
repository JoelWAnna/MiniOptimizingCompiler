
package mil;

	class MILProgram 
	{
		public static int count_g = 0;
	}

    public void optimize()
    case MILProgram !  {
        shake();
        cfunSimplify();
    
        int lastcount;
        
        int outerIterator = 1;        
        do {
            count = 0;
            count_g = 0;
            int i=1;
            do {
              debug.Log.println("-------------------------");
        //!System.out.println("==================================================");
        //!System.out.println("Step " + i);
        //!System.out.println("==================================================");
        //!display();
        //!System.out.println("==================================================");
              lastcount = count;
              count = 0;
              inlining();
              debug.Log.println("Inlining pass finished, running shake.");
              shake();
              liftAllocators();  // TODO: Is this the right position for liftAllocators?
              flow();
              debug.Log.println("Flow pass finished, running shake.");
              shake();
              debug.Log.println("Steps performed = " + count);
              ++i;
            } while (i < 20 && count>0);
            //break;
            count = lastcount;
            int j=0;
            do {
                lastcount = count_g;
                count_g = 0;
                GlobalConstantPropagation();
                debug.Log.println("GlobalConstantPropagation pass finished, running shake.");
                shake();
                debug.Log.println("Steps performed = " + count_g);
                //display();
                ++j;
            } while (j<20 && count_g>0);
               count_g = lastcount;
            ++outerIterator;
        } while (outerIterator < 20 && count+count_g>0);

        debug.Log.println("Loops performed = " + outerIterator);
        
    }


/** Run a Global Contant Propagation pass over this program.  Assumes a previous call
 *  to shake() to compute call graph information.
 *  For each Defn call propagateConstants with the argument 3 for max number of different known specializations

    If a function is called with y different constants
    and y is less than the max, then there will be y different
    locks with each constant brought into the block 

 */
public void GlobalConstantPropagation() 
case MILProgram {
        for (DefnSCCs dsccs = sccs; dsccs!=null; dsccs=dsccs.next) {
            for (Defns ds=dsccs.head.getBindings(); ds!=null; ds=ds.next) {
                Defns addedDefns = ds.head.propagateConstants(4);

                for (;addedDefns != null; addedDefns = addedDefns.next) {
                    count++;
                }

              }
        }
      }

	  
    macro List(BlockCall) // Introduces class BlockCalls

    boolean callsBlock(String id)
    case BlockCall {
        if (b == null) return false;
        return b.getId().equalsIgnoreCase(id);
    }

    /** getBlockCall 
     *  @param id The id of the Block which you want block calls to.
     *    @return a list of BlockCall objects which call id
     *
     *  If the tail of this object is a Block call, compare if it calls the passed in id
     *  calls getBlockCall on the following code c.
        if the tail calls block id, cons the tail to the list returned from c.getBlockCall
     
     */
    public BlockCalls getBlockCall(String id)
    case Code { return null; }
    case Bind {
        BlockCall thisCall = null;
        BlockCall bc = t.isBlockCall();
        if (bc instanceof BlockCall)
        {
            if (bc.callsBlock(id)) {
                thisCall = bc;
            }
        }
        BlockCalls calls = c.getBlockCall(id);
        if (thisCall != null)
            calls = new BlockCalls(thisCall, calls);
        
        return calls;
    }
    case Done { 
        BlockCall thisCall = null;
        BlockCall bc = t.isBlockCall();
        if (bc != null)
        {
            if (bc.callsBlock(id)) {
                thisCall = bc;
            }
        }
        BlockCalls calls = null;
        if (thisCall != null)
            calls = new BlockCalls(thisCall, calls);
        
        return calls;
    }
    case Match {
        BlockCalls block_calls = null;
        if (def!=null) {
            if (def.callsBlock(id)) {
                block_calls = new BlockCalls(def, block_calls);
            }
        }

        for (int i=0; i<alts.length; i++) {
            BlockCall alt_blockCall = alts[i].getBlockCall(id);
            if (alt_blockCall != null && alt_blockCall.callsBlock(id))
            {
                block_calls = new BlockCalls(alt_blockCall, block_calls);
            }
          }
        return block_calls;
    }

    public BlockCall getBlockCall(String id)
    case TAlt { 
        if (bc != null && bc.callsBlock(id))
            return bc;
        return null;
    }
public class NAC extends Atom
public class UNDEF extends Atom
macro Singleton(NAC)
macro Singleton(UNDEF)
			public String toString() 
				case NAC !{ return "Not a constant"; }
				case UNDEF !{ return "undefined"; }


			public Val lookup(ValEnv env) throws Fail 
				case NAC !{ throw new Fail("lookup called on " + "Not a constant"); }
				case UNDEF !{ throw new Fail("lookup called on " + "undefined"); }
    



    private  Atom [] checkArguments() 
    case Block {
        Atom [] arguments = new Atom[formals.length];
         for (int i = 0; i < formals.length; ++i)
             arguments[i] = formals[i];
         BlockCalls bc = code.getBlockCall(id);
         while (bc != null) {
             for (int i = 0; i < arguments.length; ++i)
             {
                 Atom a = bc.head.args[i];
                 if (!arguments[i].sameAtom(a)) {
                     if (a.isConst() != null) {
                         arguments[i] = a;
                     }
                     else {
                         arguments[i] = NAC.obj;
                     }
    
                 }
             }
             bc = bc.next;
         }
         arguments = code.checkformals(arguments);
        for (int i = 0; i < formals.length; ++i)
        {
            if (arguments[i] == null) break;
            if (arguments[i] != NAC.obj) {
                if (arguments[i].isConst() != null &&  !arguments[i].sameAtom(formals[i])) {
                    arguments[i] = NAC.obj;
                }
            }
            else {
                debug.Log.println("Argument " + i + " is modified");
                
            }
        }
        return arguments;        
    }

    /** checkformals
	 * @param atoms A list of formals to compare to the variable "assigned" to with a Bind
	 * If incoming argument is given a new value with a call to Bind.
	   Currently, if Bind is called on an incoming parameter the argument is set to NAC

	 */
   public Atom[] checkformals(Atom[] atoms)
    case Code { return atoms; }
    case Bind { for(int i = 0; i < atoms.length; ++i) {
            if (v.sameAtom(atoms[i])) {
                atoms[i] = NAC.obj;
            }
        }
        return c.checkformals(atoms);    
    }

	

    public void replaceBc(BlockCall bc)
    case TAlt { this.bc = bc; }

	/** replaceCalls
	 * @param id: the id of the block call which has been specialized
	 * @param j:  the argument number which has been removed from block id
	   @param replaced: either the Const object which was removed, or for the case of a recursive call
	   the Var object which was removed
	   @param b: the new Block object which was specialized from id
	 */
    boolean replaceCalls(String id, int j, Atom replaced, Block b)
    case Code { return false; }
    case Bind {
        Boolean success = false;
        BlockCall thisCall = null;
        BlockCall bc = t.isBlockCall();
        if (bc != null) {
            if (bc.callsBlock(id)) {
                thisCall = bc;
                if (thisCall.args[j].sameAtom(replaced)) {
                    
                    BlockCall temp = new BlockCall(b);
                    int l = bc.args.length-1;
                    temp.args = new Atom[l];
                    for (int i = 0; i < l; ++i) {
                        if (i >= j) {
                            temp.args[i] = bc.args[i+1];
                        }
                        else
                            temp.args[i] = bc.args[i];
                    }
                    t = temp;
                    success = true;
                }
            }
        }
        
        return c.replaceCalls(id, j, replaced, b) || success;
    }
    case Done {
        BlockCall thisCall = null;
        BlockCall bc = t.isBlockCall();
        if (bc != null) {
            if (bc.callsBlock(id)) {
                thisCall = bc;
                if (thisCall.args[j].sameAtom(replaced)) {
                    
                    BlockCall temp = new BlockCall(b);
                    int l = bc.args.length-1;
                    temp.args = new Atom[l];
                    for (int i = 0; i < l; ++i) {
                        if (i >= j) {
                            temp.args[i] = bc.args[i+1];
                        }
                        else
                            temp.args[i] = bc.args[i];
                    }
                    t = temp;
                    return true;
                }
            }
        }
        return false;
    }
    case Match {
        boolean success = false;
        if (def!=null) {
        // Determine if the default case is a call to block id
            if (def.callsBlock(id)) {

                // Compare to either see if the call to block id can be replaced with a call to block b
                if (def.args[j].sameAtom(replaced)) {
                    
                    BlockCall temp = new BlockCall(b);
                    int l = def.args.length-1;
                    temp.args = new Atom[l];
                    for (int i = 0; i < l; ++i) {
                        if (i >= j) {
                            temp.args[i] = def.args[i+1];
                        }
                        else
                            temp.args[i] = def.args[i];
                    }
                    def = temp;
                    success = true;
                }
            }
        }

        for (int i=0; i<alts.length; i++) {
            BlockCall alt_blockCall = alts[i].getBlockCall(id);
            if (alt_blockCall != null && alt_blockCall.callsBlock(id)){
                if (alt_blockCall.args[j].sameAtom(replaced)) {
                    
                    BlockCall temp = new BlockCall(b);
                    int l = alt_blockCall.args.length-1;
                    temp.args = new Atom[l];
                    for (int i1 = 0; i1 < l; ++i1) {
                        if (i1 >= j) {
                            temp.args[i1] = alt_blockCall.args[i1+1];
                        }
                        else
                            temp.args[i1] = alt_blockCall.args[i1];
                    }
                    alts[i].replaceBc(temp);
                    success = true;
                }
            }
          }
        return success;
    }

    public abstract class Defn {
        public case Block {
            private Blocks children;
            private Atom replacedVar;
            private int version;
		}
    }

    /** propagateConstants
     * @param maxArgReplacement - determines the maximum tuple size of the lattice for each parameter
     *
	 *
	 
	 */
    public Defns propagateConstants(int maxArgReplacement)
    case Defn abstract;
    case ClosureDefn {
        // TODO: Implement this, only sibling class that it is implemented is Block.java
        System.out.println("reached ClosureDefn propagateConstants of block" + id);
        return null;
    }
    case TopLevel {
        // TODO: Implement this, only sibling class that it is implemented is Block.java
        System.out.println("reached TopLevel propagateConstants of block" + id);
        return null;
    }
    
    case Block {
    	Defns Created = null;
    	if (formals.length == 0) {
    	//	System.out.println("Block " + id + " has no vars");
    		return null;
    	}
    	if (version > 3) {
    		System.out.println("Block " + id + " is version " + version);
    		
			return null;

    	}
    	//debug.Log.println("reached Block propagateConstants of block " + id);
   
    	Atom knownArgs[][] = new Atom[formals.length][maxArgReplacement];
        Atom reEntryFormals[] = checkArguments();
    	
    	
    	for(Defns xs= this.getCallers(); xs != null; xs = xs.next)
    	{
    		Block x = (Block) xs.head;

    		BlockCalls x_calls = x.code.getBlockCall(id);
    		if (x_calls != null)
    		{
    			BlockCalls current_call = x_calls;
    			
    			while (current_call != null) {
    				
    				// Check for calls from the current block
    				if (x.getId().equalsIgnoreCase(id))
    				{
        				for (int j = 0; j < formals.length; ++j )
        				{
        					if (knownArgs[j][0] != NAC.obj)
        						
        					{
        						// TODO: is it ever valid to not replace it with NAC?
        						if (reEntryFormals[j] ==  NAC.obj)
        							knownArgs[j][0] =  NAC.obj;
        						if ((reEntryFormals[j].isConst() != null))
        						{
        							int k;
        						
	        						for (k = 0; k < maxArgReplacement; ++k)
	        						{
	        							if (knownArgs[j][k] == null) {
	        								knownArgs[j][k] = reEntryFormals[j];
	        								break;
	        							}
	        							if (reEntryFormals[j].sameAtom(knownArgs[j][k])) {
	        								break;
	        							}
	        						}
	        						if (k == maxArgReplacement) {
	        							knownArgs[j][0] = NAC.obj;
	        						}
        						}
        					}
        				}
        			}
    				else { // Not a call from the current block
    					Atom formals2[] =  current_call.head.args;
    					for (int j = 0; j < formals.length; ++j )
        				{
        					if (knownArgs[j][0] !=  NAC.obj && (formals2[j].isConst() != null))
        					{
        						int k;
        						for (k = 0; k < maxArgReplacement; ++k)
        						{
        							if (knownArgs[j][k] == null) {
        								knownArgs[j][k] =  formals2[j];
        								break;
        							}
        							if (formals2[j].sameAtom(knownArgs[j][k])) {
        								break;
        							}
        						}
        						if (k == maxArgReplacement) {
        							knownArgs[j][0] =  NAC.obj;
        						}
        					}
        				}
    				}
    				current_call = current_call.next;
        		}
    		}
    	}

		int newVersion = version+1;
		for (int j = 0; j < formals.length; ++j )
		{
			if (knownArgs[j][0] == NAC.obj || knownArgs[j][0] == UNDEF.obj) {
				//System.out.println("Arg " + j + " is " + knownArgs[j][0].toString());
				continue;
			}
			for ( int k = 0; k < maxArgReplacement; ++k) {
				if (knownArgs[j][k] != null) {
					Block b = null;
					Blocks currentChild = this.children;
					while (currentChild != null) {
						if (currentChild.head.replacedVar.sameAtom(knownArgs[j][k]))
						{
							b = currentChild.head;
							break;
						}
						currentChild = currentChild.next;
					}
					if (b == null ) {
						b = new Block();
						b.version = newVersion++;
					    int l = formals.length -1;
					    Var[] nfs = new Var[l];
					    for (int i = 0; i < l; ++i) {
					    	if (i >= j)
					    	{
					    		nfs[i] = formals[i+1];
					    	}
					    	else
					    		nfs[i] = formals[i];
					    		
					    }
					    //
					    //	TODO: version 'A' create a new Bind for the arg
					    //  Code bind = new Bind(formals[j], new Return(knownArgs[j][k]), code);
					    //   b.code = bind;
					    //
					    // TODO: version 'B' 
					    // Current method, copy the entire block, and apply AtomSubst
						b.code = code.copy();
						//
					    b.formals = nfs;
					    b.replacedVar = knownArgs[j][k];
					    b.code.replaceCalls(id, j, formals[j], b);
					    // The following line is part of version 'B'
					    // which should? be removed if version 'A' can be fixed 
					    b.code = b.code.apply(new AtomSubst(formals[j], knownArgs[j][k], null));
					    
					    b.display();
					    children = new Blocks(b, children);

						debug.Log.println("Created Block " + b.id + " from block " + id);
						//b.display();
						 Created = new Defns(b, Created);
					}
	
		        	for(Defns callersIter= this.getCallers(); callersIter != null; callersIter = callersIter.next)
		        	{
		        		Block caller = (Block) callersIter.head;
		        		if (caller.code.replaceCalls(id, j, knownArgs[j][k], b))
		        		{
		        			// TODO: do anything here?
		        		}
		        	}
				}
			}
		}

		return Created;
    }
 





 
